[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=2]
constant = Color( 0.771563, 0.939083, 1, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 0.6

[sub_resource type="VisualShaderNodeScalarConstant" id=118]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=119]
constant = 0.1

[sub_resource type="OpenSimplexNoise" id=120]

[sub_resource type="NoiseTexture" id=121]
noise = SubResource( 120 )

[sub_resource type="VisualShaderNodeTexture" id=122]
texture = SubResource( 121 )

[sub_resource type="VisualShaderNodeInput" id=123]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=124]

[sub_resource type="VisualShaderNodeScalarOp" id=125]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=126]

[sub_resource type="VisualShaderNodeVectorCompose" id=127]

[sub_resource type="VisualShaderNodeScalarOp" id=128]
operator = 2

[sub_resource type="VisualShader" id=3]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D tex_vtx_2;



void vertex() {
// Input:3
	vec3 n_out3p0 = VERTEX;

// VectorDecompose:6
	float n_out6p0 = n_out3p0.x;
	float n_out6p1 = n_out3p0.y;
	float n_out6p2 = n_out3p0.z;

// Texture:2
	vec4 tex_vtx_2_read = texture(tex_vtx_2, UV.xy);
	vec3 n_out2p0 = tex_vtx_2_read.rgb;
	float n_out2p1 = tex_vtx_2_read.a;

// VectorDecompose:4
	float n_out4p0 = n_out2p0.x;
	float n_out4p1 = n_out2p0.y;
	float n_out4p2 = n_out2p0.z;

// ScalarOp:5
	float n_out5p0 = n_out4p0 * n_out4p2;

// ScalarOp:8
	float n_out8p0 = n_out5p0 * n_out6p1;

// VectorCompose:7
	vec3 n_out7p0 = vec3(n_out6p0, n_out8p0, n_out6p2);

// Output:0
	VERTEX = n_out7p0;

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.771563, 0.939083, 1.000000);
	float n_out2p1 = 1.000000;

// Scalar:3
	float n_out3p0 = 0.600000;

// Scalar:4
	float n_out4p0 = 1.000000;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out3p0;
	ROUGHNESS = n_out4p0;
	SPECULAR = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -603.239, 155.398 )
nodes/vertex/0/position = Vector2( 780, 140 )
nodes/vertex/2/node = SubResource( 122 )
nodes/vertex/2/position = Vector2( -640, 40 )
nodes/vertex/3/node = SubResource( 123 )
nodes/vertex/3/position = Vector2( -580, 380 )
nodes/vertex/4/node = SubResource( 124 )
nodes/vertex/4/position = Vector2( -380, 120 )
nodes/vertex/5/node = SubResource( 125 )
nodes/vertex/5/position = Vector2( -120, 60 )
nodes/vertex/6/node = SubResource( 126 )
nodes/vertex/6/position = Vector2( -360, 360 )
nodes/vertex/7/node = SubResource( 127 )
nodes/vertex/7/position = Vector2( 500, 200 )
nodes/vertex/8/node = SubResource( 128 )
nodes/vertex/8/position = Vector2( 120, 100 )
nodes/vertex/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 6, 0, 7, 0, 0, 0, 6, 0, 7, 0, 5, 0, 8, 0, 6, 1, 8, 1, 8, 0, 7, 1, 4, 2, 5, 1, 4, 0, 5, 0, 6, 2, 7, 2 )
nodes/fragment/0/position = Vector2( 660, 100 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -140, 120 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -160, 220 )
nodes/fragment/4/node = SubResource( 118 )
nodes/fragment/4/position = Vector2( -40, 320 )
nodes/fragment/5/node = SubResource( 119 )
nodes/fragment/5/position = Vector2( 0, 420 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 1, 4, 0, 0, 3, 4, 0, 0, 4, 2, 0, 0, 0 )

[resource]
shader = SubResource( 3 )
